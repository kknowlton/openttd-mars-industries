grf {
	grfid: "KK\03\01";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESCRIPTION);
	version: 0;
	min_compatible_version: 0;
}

/*	override the vehicles in Toyland to Mars Conversion or they double up when you try to modify them */
engine_override("MeoT");

/*	declare the cargos that will be used in the GRF with their 4 letter labels
	http://www.tt-wiki.net/wiki/NMLTutorial/Cargotable */
cargotable {
	PASS, MAIL, HYCH, DIAT, WOOD, DEUT, CHEM, ALOY, LUMB, GOOD, PLST
}

/*	cargo
	http://newgrf-specs.tt-wiki.net/wiki/NML:Cargos
00	Passenger
02	Mail
*/

item (FEAT_CARGOS, cargo_PASS, 0) {
	property {
		number:						0;
		type_name:					string(STR_CARGO_NAME_PASS);
		unit_name: 					string(STR_CARGO_NAME_PASS);
		units_of_cargo:				string(STR_CARGO_UNIT_PASS);
		items_of_cargo:				string(STR_CARGO_UNIT_PASS);
	}
}

item (FEAT_CARGOS, cargo_DIAT, 1) {
	property {
		number:						1;
		type_name:					string(STR_CARGO_NAME_DIAT);
		unit_name: 					string(STR_CARGO_NAME_DIAT);
		units_of_cargo:				string(STR_CARGO_UNIT_DIAT);
		items_of_cargo:				string(STR_CARGO_UNIT_DIAT);
		type_abbreviation:			string(STR_CID_DIAT);
		sprite: 					4316;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_POWDERIZED, CC_BULK);
		cargo_label:				"DIAT";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}

// Mail - ID 2

item (FEAT_CARGOS, cargo_GOOD, 3) {
	property {
		number:						3;
		type_name:					string(STR_CARGO_NAME_GOOD);
		unit_name: 					string(STR_CARGO_NAME_GOOD);
		units_of_cargo:				string(STR_CARGO_UNIT_GOOD);
		items_of_cargo:				string(STR_CARGO_UNIT_GOOD);
		type_abbreviation:			string(STR_CID_GOOD);
		sprite: 					4302;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS, CC_EXPRESS);
		cargo_label:				"GOOD";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}

item (FEAT_CARGOS, cargo_ALOY, 8) {
	property {
		number:						8;
		type_name:					string(STR_CARGO_NAME_ALOY);
		unit_name: 					string(STR_CARGO_NAME_ALOY);
		units_of_cargo:				string(STR_CARGO_UNIT_ALOY);
		items_of_cargo:				string(STR_CARGO_UNIT_ALOY);
		type_abbreviation:			string(STR_CID_ALOY);
		sprite: 					4306;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"ALOY";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}

item (FEAT_CARGOS, cargo_CHEM, 5) {
	property {
		number:						5;
		type_name:					string(STR_CARGO_NAME_CHEM);
		unit_name: 					string(STR_CARGO_NAME_CHEM);
		units_of_cargo:				string(STR_CARGO_UNIT_CHEM);
		items_of_cargo:				string(STR_CARGO_UNIT_CHEM);
		type_abbreviation:			string(STR_CID_CHEM);
		sprite: 					4322;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_HAZARDOUS);
		cargo_label:				"CHEM";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}

item (FEAT_CARGOS, cargo_LUMB, 6) {
	property {
		number:						6;
		type_name:					string(STR_CARGO_NAME_LUMB);
		unit_name: 					string(STR_CARGO_NAME_LUMB);
		units_of_cargo:				string(STR_CARGO_UNIT_LUMB);
		items_of_cargo:				string(STR_CARGO_UNIT_LUMB);
		type_abbreviation:			string(STR_CID_LUMB);
		sprite: 					4314;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"LUMB";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}

item (FEAT_CARGOS, cargo_HYCH, 7) {
	property {
		number:						7;
		type_name:					string(STR_CARGO_NAME_HYCH);
		unit_name: 					string(STR_CARGO_NAME_HYCH);
		units_of_cargo:				string(STR_CARGO_UNIT_HYCH);
		items_of_cargo:				string(STR_CARGO_UNIT_HYCH);
		type_abbreviation:			string(STR_CID_HYCH);
		sprite: 					4311;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"HYCH";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}

item (FEAT_CARGOS, cargo_WOOD, 4) {
	property {
		number:						4;
		type_name:					string(STR_CARGO_NAME_WOOD);
		unit_name: 					string(STR_CARGO_NAME_WOOD);
		units_of_cargo:				string(STR_CARGO_UNIT_WOOD);
		items_of_cargo:				string(STR_CARGO_UNIT_WOOD);
		type_abbreviation:			string(STR_CID_WOOD);
		sprite: 					4304;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"WOOD";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}
item (FEAT_CARGOS, cargo_DEUT, 9) {
	property {
		number:						9;
		type_name:					string(STR_CARGO_NAME_DEUT);
		unit_name: 					string(STR_CARGO_NAME_DEUT);
		units_of_cargo:				string(STR_CARGO_UNIT_DEUT);
		items_of_cargo:				string(STR_CARGO_UNIT_DEUT);
		type_abbreviation:			string(STR_CID_DEUT);
		sprite: 					4321;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"DEUT";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}
item (FEAT_CARGOS, cargo_PLST, 10) {
	property {
		number:						10;
		type_name:					string(STR_CARGO_NAME_PLST);
		unit_name: 					string(STR_CARGO_NAME_PLST);
		units_of_cargo:				string(STR_CARGO_UNIT_PLST);
		items_of_cargo:				string(STR_CARGO_UNIT_PLST);
		type_abbreviation:			string(STR_CID_PLST);
		sprite: 					4321;
//		weight:						1;
//		penalty_lowerbound:			0;
//		single_penalty_length:		18;
//		price_factor:				5000;
//		station_list_colour:		97;
//		cargo_payment_list_colour:	97;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK);
		cargo_label:				"PLST";
		town_growth_effect:			TOWNGROWTH_NONE;
		capacity_multiplier:		1;
	}
}

/*	create or modify an industry
	http://newgrf-specs.tt-wiki.net/wiki/NML:Industries */

/* Hydroponic farm */
item(FEAT_INDUSTRIES, industry_hf, 26) {
    property {
		substitute:					26;
		override:					26;
		name:						string(STR_IND_NAME_HF);
		nearby_station_name:		string(STR_IND_STATION_HF);
		prod_cargo_types:			[GOOD];
		accept_cargo_types:			[CHEM];
		prod_multiplier:			[15];
	}
}

item(FEAT_INDUSTRYTILES, industry_hf_tile_129, 129) {
	property {
		substitute:					129;
		override:					129;
		accepted_cargos:			[[CHEM,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_hf_tile_130, 130) {
	property {
		substitute:					130;
		override:					130;
		accepted_cargos:			[[CHEM,8]];
	}
}

/* fusion power plant */
item(FEAT_INDUSTRIES, industry_fr, 27) {
    property {
		substitute:					27;
		override:					27;
		name:						string(STR_IND_NAME_FR);
		nearby_station_name:		string(STR_IND_STATION_FR);
		prod_cargo_types:			[];
		layouts:					[industry_fr_layout_1];
		accept_cargo_types:			[DEUT];
		prod_multiplier:			[0];
	}
}
item(FEAT_INDUSTRYTILES, industry_fr_tile_131, 131) {
	property {
		substitute:					131;
		override:					131;
		accepted_cargos:			[[DEUT,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_fr_tile_132, 132) {
	property {
		substitute:					132;
		override:					132;
		accepted_cargos:			[[DEUT,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_fr_tile_133, 133) {
	property {
		substitute:					133;
		override:					133;
		accepted_cargos:			[[DEUT,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_fr_tile_134, 134) {
	property {
		substitute:					134;
		override:					134;
		accepted_cargos:			[[DEUT,8]];
	}
}
tilelayout industry_fr_layout_1 {
 	0, 0: 131;
 	0, 1: 132;
 	1, 0: 133;
 	1, 1: 134;
}


/* xeno-arboretum */
/*
replace forest_trees(1005, "") {

spritelayout spritelayout_industry_xa {
    ground {
        sprite: GROUNDSPRITE_NORMAL;
    }
    building {
        sprite: 1960;
        xextent: 4;
        yextent: 4;
        zextent: 24;
        xoffset: 12; //from NE edge
        yoffset: 6; //from NW edge
        zoffset: 0;
    }
}
*/
item(FEAT_INDUSTRIES, industry_xa, 28) {
    property {
		substitute:					28;
		override:					28;
		layouts:					[industry_xa_layout_1, industry_xa_layout_2];
		prod_cargo_types:			[WOOD];
		accept_cargo_types:			[];
		prod_multiplier:			[15,15];
		name:						string(STR_IND_NAME_XA);
		nearby_station_name:		string(STR_IND_STATION_XA);
	}
}
item(FEAT_INDUSTRYTILES, industry_xa_tile_135, 135) {
	property {
		substitute:					135;
		override:					135;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_xa_tile_136, 136) {
	property {
		substitute:					136;
		override:					136;
		accepted_cargos:			[];
	}
}
tilelayout industry_xa_layout_1 {
 	0, 0: 135;
 	0, 1: 135;
 	0, 2: 135;
 	0, 3: 135;
 	0, 4: 135;
 	2, 0: 135;
 	2, 1: 135;
 	2, 2: 135;
 	2, 3: 135;
 	2, 4: 135;
 	4, 0: 135;
 	4, 1: 135;
 	4, 2: 135;
 	4, 3: 135;
 	4, 4: 135;
}
tilelayout industry_xa_layout_2 {
 	0, 0: 135;
 	1, 0: 135;
 	2, 0: 135;
 	3, 0: 135;
 	4, 0: 135;
 	0, 2: 135;
 	1, 2: 135;
 	2, 2: 135;
 	3, 2: 135;
 	4, 2: 135;
 	0, 4: 135;
 	1, 4: 135;
 	2, 4: 135;
 	3, 4: 135;
 	4, 4: 135;
}

/* colony landing pod */
item(FEAT_INDUSTRIES, industry_cl, 29) {
    property {
		substitute:					29;
		override:					29;
		layouts:					[industry_cl_layout_1, industry_cl_layout_2];
		prod_cargo_types:			[GOOD, PASS];
		accept_cargo_types:			[DEUT];
		prod_multiplier:			[15];
		name:						string(STR_IND_NAME_CL);
		nearby_station_name:		string(STR_IND_STATION_CL);
	}
}

item(FEAT_INDUSTRYTILES, industry_cl_tile_137, 137) {
	property {
		substitute:					137;
		override:					137;
		accepted_cargos:			[[DEUT,8]];
	}
}

tilelayout industry_cl_layout_1 {
 	0, 0: 137;
 	2, 1: 137;
 	5, 3: 137;
 	1, 5: 137;
 	4, 4: 137;
}

tilelayout industry_cl_layout_2 {
 	0, 0: 137;
}

/* ceramic kiln */
item(FEAT_INDUSTRIES, industry_ck, 30) {
    property {
		substitute:					30;
		override:					30;
		prod_cargo_types:			[ALOY];
		accept_cargo_types:			[DIAT,CHEM];
		prod_multiplier:			[15];
		name:						string(STR_IND_NAME_CK);
		nearby_station_name:		string(STR_IND_STATION_CK);
	}
}

item(FEAT_INDUSTRYTILES, industry_ck_tile_138, 138) {
	property {
		substitute:					138;
		override:					138;
		accepted_cargos:			[[DIAT,8],[CHEM,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_ck_tile_139, 139) {
	property {
		substitute:					139;
		override:					139;
		accepted_cargos:			[[DIAT,8],[CHEM,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_ck_tile_140, 140) {
	property {
		substitute:					140;
		override:					140;
		accepted_cargos:			[[DIAT,8],[CHEM,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_ck_tile_141, 141) {
	property {
		substitute:					141;
		override:					141;
		accepted_cargos:			[[DIAT,8],[CHEM,8]];
	}
}


/* automated manufactory */
item(FEAT_INDUSTRIES, industry_am, 31) {
    property {
		substitute:					31;
		override:					31;
		prod_cargo_types:			[GOOD];
		accept_cargo_types:			[ALOY,CHEM,PLST];
		prod_multiplier:			[15];
		name:						string(STR_IND_NAME_AM);
		nearby_station_name:		string(STR_IND_STATION_AM);
	}
}

item(FEAT_INDUSTRYTILES, industry_am_tile_142, 142) {
	property {
		substitute:					142;
		override:					142;
		accepted_cargos:			[[ALOY,8],[CHEM,8],[PLST,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_am_tile_143, 143) {
	property {
		substitute:					143;
		override:					143;
		accepted_cargos:			[[ALOY,8],[CHEM,8],[PLST,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_am_tile_144, 144) {
	property {
		substitute:					144;
		override:					144;
		accepted_cargos:			[[ALOY,8],[CHEM,8],[PLST,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_am_tile_145, 145) {
	property {
		substitute:					145;
		override:					145;
		accepted_cargos:			[[ALOY,8],[CHEM,8],[PLST,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_am_tile_146, 146) {
	property {
		substitute:					146;
		override:					146;
		accepted_cargos:			[[ALOY,8],[CHEM,8],[PLST,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_am_tile_147, 147) {
	property {
		substitute:					147;
		override:					147;
		accepted_cargos:			[[ALOY,8],[CHEM,8],[PLST,8]];
	}
}

/* hydrochemical drill */
item(FEAT_INDUSTRIES, industry_hd, 32) {
    property {
		substitute:					32;
		override:					32;
		prod_cargo_types:			[HYCH];
		accept_cargo_types:			[];
		prod_multiplier:			[15];
		name:						string(STR_IND_NAME_HD);
		nearby_station_name:		string(STR_IND_STATION_HD);
	}
}

item(FEAT_INDUSTRYTILES, industry_hd_tile_148, 148) {
	property {
		substitute:					148;
		override:					148;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_hd_tile_149, 149) {
	property {
		substitute:					149;
		override:					149;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_hd_tile_150, 150) {
	property {
		substitute:					150;
		override:					150;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_hd_tile_151, 151) {
	property {
		substitute:					151;
		override:					151;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_hd_tile_152, 152) {
	property {
		substitute:					152;
		override:					152;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_hd_tile_153, 153) {
	property {
		substitute:					153;
		override:					153;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_hd_tile_154, 154) {
	property {
		substitute:					154;
		override:					154;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_hd_tile_155, 155) {
	property {
		substitute:					155;
		override:					155;
		accepted_cargos:			[];
	}
}

/* hydrochemical refinery */
item(FEAT_INDUSTRIES, industry_hr, 33) {
    property {
		substitute:					33;
		override:					33;
		prod_cargo_types:			[DEUT,CHEM];
		accept_cargo_types:			[HYCH];
		layouts:					[industry_hr_layout_1];
		prod_multiplier:			[];
		name:						string(STR_IND_NAME_HR);
		nearby_station_name:		string(STR_IND_STATION_HR);
	}
}
item(FEAT_INDUSTRYTILES, industry_hr_tile_156, 156) {
	property {
		substitute:					156;
		override:					156;
		accepted_cargos:			[[HYCH,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_hr_tile_157, 157) {
	property {
		substitute:					157;
		override:					157;
		accepted_cargos:			[[HYCH,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_hr_tile_158, 158) {
	property {
		substitute:					158;
		override:					158;
		accepted_cargos:			[[HYCH,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_hr_tile_159, 159) {
	property {
		substitute:					159;
		override:					159;
		accepted_cargos:			[[HYCH,8]];
	}
}
tilelayout industry_hr_layout_1 {
 	0, 0: 156;
 	0, 1: 157;
 	1, 0: 158;
 	1, 1: 159;
}

/* xeno-flora processing */
item(FEAT_INDUSTRIES, industry_xp, 34) {
    property {
		substitute:					34;
		override:					34;
		prod_cargo_types:			[LUMB];
		accept_cargo_types:			[WOOD];
		prod_multiplier:			[15];
		name:						string(STR_IND_NAME_XP);
		nearby_station_name:		string(STR_IND_STATION_XP);
	}
}
item(FEAT_INDUSTRYTILES, industry_xp_tile_160, 160) {
	property {
		substitute:					160;
		override:					160;
		accepted_cargos:			[[WOOD,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_xp_tile_161, 161) {
	property {
		substitute:					161;
		override:					161;
		accepted_cargos:			[[WOOD,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_xp_tile_162, 162) {
	property {
		substitute:					162;
		override:					162;
		accepted_cargos:			[[WOOD,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_xp_tile_163, 163) {
	property {
		substitute:					163;
		override:					163;
		accepted_cargos:			[[WOOD,8]];
	}
}

/* bio-plastic extractor */
item(FEAT_INDUSTRIES, industry_be, 35) {
    property {
		substitute:					35;
		override:					35;
		prod_cargo_types:			[PLST];
		accept_cargo_types:			[LUMB];
		prod_multiplier:			[15,15];
		name:						string(STR_IND_NAME_BE);
		nearby_station_name:		string(STR_IND_STATION_BE);
	}
}
item(FEAT_INDUSTRYTILES, industry_be_tile_164, 164) {
	property {
		substitute:					164;
		override:					164;
		accepted_cargos:			[[LUMB,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_be_tile_165, 165) {
	property {
		substitute:					165;
		override:					165;
		accepted_cargos:			[[LUMB,8]];
	}
}
item(FEAT_INDUSTRYTILES, industry_be_tile_166, 166) {
	property {
		substitute:					166;
		override:					166;
		accepted_cargos:			[[LUMB,8]];
	}
}

/* Diatomaceous Soil Mine */
item(FEAT_INDUSTRIES, industry_ds, 36) {
    property {
		substitute:					36;
		override:					36;
		prod_cargo_types:			[DIAT];
		accept_cargo_types: 		[];
		prod_multiplier:			[15];
		name:						string(STR_IND_NAME_DS);
		nearby_station_name:		string(STR_IND_STATION_DS);
	}
}
item(FEAT_INDUSTRYTILES, industry_ds_tile_167, 167) {
	property {
		substitute:					167;
		override:					167;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_ds_tile_168, 168) {
	property {
		substitute:					168;
		override:					168;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_ds_tile_169, 169) {
	property {
		substitute:					169;
		override:					169;
		accepted_cargos:			[];
	}
}
item(FEAT_INDUSTRYTILES, industry_ds_tile_170, 170) {
	property {
		substitute:					170;
		override:					170;
		accepted_cargos:			[];
	}
}

/* Vehicles */

item(FEAT_TRAINS, train_rail_eng_0, 0) {
	property {
		name: string(STR_TRAIN_NAME_0);
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_eng_2, 2) {
	property {
		name: string(STR_TRAIN_NAME_2);
	}
}
item(FEAT_TRAINS, train_rail_eng_3, 3) {
	property {
		name: string(STR_TRAIN_NAME_3);
	}
}
item(FEAT_TRAINS, train_rail_eng_4, 4) {
	property {
		name: string(STR_TRAIN_NAME_4);
	}
}
item(FEAT_TRAINS, train_rail_eng_5, 5) {
	property {
		name: string(STR_TRAIN_NAME_5);
	}
}
item(FEAT_TRAINS, train_rail_eng_6, 6) {
	property {
		name: string(STR_TRAIN_NAME_6);
	}
}
item(FEAT_TRAINS, train_rail_eng_7, 11) {
	property {
		name: string(STR_TRAIN_NAME_7);
	}
}
item(FEAT_TRAINS, train_rail_eng_8, 12) {
	property {
		name: string(STR_TRAIN_NAME_8);
	}
}
item(FEAT_TRAINS, train_rail_eng_9, 22) {
	property {
		name: string(STR_TRAIN_NAME_9);
	}
}
item(FEAT_TRAINS, train_rail_eng_10, 25) {
	property {
		name: string(STR_TRAIN_NAME_10);
	}
}
item(FEAT_TRAINS, train_rail_eng_11, 26) {
	property {
		name: string(STR_TRAIN_NAME_11);
	}
}
item(FEAT_TRAINS, train_rail_eng_12, 56) {
	property {
		name: string(STR_TRAIN_NAME_12);
	}
}
item(FEAT_TRAINS, train_rail_eng_13, 88) {
	property {
		name: string(STR_TRAIN_NAME_13);
	}
}

item(FEAT_TRAINS, train_rail_pass_1, 27) {
	property {
		name: string(STR_TRAIN_NAME_PASSENGER_1);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}item(FEAT_TRAINS, train_rail_van_1, 28) {
	property {
		name: string(STR_TRAIN_NAME_VAN_1);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}item(FEAT_TRAINS, train_rail_hopper_1, 44) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_1);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_hopper_2, 45) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_2);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_hopper_3, 46) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_3);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_van_2, 47) {
	property {
		name: string(STR_TRAIN_NAME_VAN_2);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_tanker_1, 48) {
	property {
		name: string(STR_TRAIN_NAME_TANKER_1);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_van_3, 49) {
	property {
		name: string(STR_TRAIN_NAME_VAN_3);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_van_4, 50) {
	property {
		name: string(STR_TRAIN_NAME_VAN_4);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_flat_1, 51) {
	property {
		name: string(STR_TRAIN_NAME_FLAT_1);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_flat_2, 52) {
	property {
		name: string(STR_TRAIN_NAME_FLAT_2);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_rail_tanker_2, 53) {
	property {
		name: string(STR_TRAIN_NAME_TANKER_2);
		model_life: VEHICLE_NEVER_EXPIRES;
		introduction_date: date(1900,01,01);
	}
}
item(FEAT_TRAINS, train_mono_hopper_1, 74) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_1);
	}
}
item(FEAT_TRAINS, train_mono_hopper_2, 75) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_2);
	}
}
item(FEAT_TRAINS, train_mono_hopper_3, 76) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_3);
	}
}
item(FEAT_TRAINS, train_mono_van_2, 77) {
	property {
		name: string(STR_TRAIN_NAME_VAN_2);
	}
}
item(FEAT_TRAINS, train_mono_tanker_1, 78) {
	property {
		name: string(STR_TRAIN_NAME_TANKER_1);
	}
}
item(FEAT_TRAINS, train_mono_van_3, 79) {
	property {
		name: string(STR_TRAIN_NAME_VAN_3);
	}
}
item(FEAT_TRAINS, train_mono_van_4, 80) {
	property {
		name: string(STR_TRAIN_NAME_VAN_4);
	}
}
item(FEAT_TRAINS, train_mono_flat_1, 81) {
	property {
		name: string(STR_TRAIN_NAME_FLAT_1);
	}
}
item(FEAT_TRAINS, train_mono_flat_2, 82) {
	property {
		name: string(STR_TRAIN_NAME_FLAT_2);
	}
}
item(FEAT_TRAINS, train_mono_tanker_2, 83) {
	property {
		name: string(STR_TRAIN_NAME_TANKER_2);
	}
}
item(FEAT_TRAINS, train_mlev_hopper_1, 106) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_1);
	}
}
item(FEAT_TRAINS, train_mlev_hopper_2, 107) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_2);
	}
}
item(FEAT_TRAINS, train_mlev_hopper_3, 108) {
	property {
		name: string(STR_TRAIN_NAME_HOPPER_3);
	}
}
item(FEAT_TRAINS, train_mlev_van_2, 109) {
	property {
		name: string(STR_TRAIN_NAME_VAN_2);
	}
}
item(FEAT_TRAINS, train_mlev_tanker_1, 110) {
	property {
		name: string(STR_TRAIN_NAME_TANKER_1);
	}
}
item(FEAT_TRAINS, train_mlev_van_3, 111) {
	property {
		name: string(STR_TRAIN_NAME_VAN_3);
	}
}
item(FEAT_TRAINS, train_mlev_van_4, 112) {
	property {
		name: string(STR_TRAIN_NAME_VAN_4);
	}
}
item(FEAT_TRAINS, train_mlev_flat_1, 113) {
	property {
		name: string(STR_TRAIN_NAME_FLAT_1);
	}
}
item(FEAT_TRAINS, train_mlev_flat_2, 114) {
	property {
		name: string(STR_TRAIN_NAME_FLAT_2);
	}
}
item(FEAT_TRAINS, train_mlev_tanker_2, 115) {
	property {
		name: string(STR_TRAIN_NAME_TANKER_2);
	}
}